// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/CelticAlreadyUse/article-story-service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// CategoriesRepository is an autogenerated mock type for the CategoriesRepository type
type CategoriesRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, body
func (_m *CategoriesRepository) Create(ctx context.Context, body model.Category) (model.Category, error) {
	ret := _m.Called(ctx, body)

	var r0 model.Category
	if rf, ok := ret.Get(0).(func(context.Context, model.Category) model.Category); ok {
		r0 = rf(ctx, body)
	} else {
		r0 = ret.Get(0).(model.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Category) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CategoriesRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, params
func (_m *CategoriesRepository) GetAll(ctx context.Context, params model.CategoryParams) ([]*model.Category, error) {
	ret := _m.Called(ctx, params)

	var r0 []*model.Category
	if rf, ok := ret.Get(0).(func(context.Context, model.CategoryParams) []*model.Category); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.CategoryParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCategoriesByIds provides a mock function with given fields: ctx, id
func (_m *CategoriesRepository) GetAllCategoriesByIds(ctx context.Context, id []int64) ([]*model.Category, error) {
	ret := _m.Called(ctx, id)

	var r0 []*model.Category
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []*model.Category); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CategoriesRepository) GetByID(ctx context.Context, id int64) (*model.Category, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Category
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Category); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, Body
func (_m *CategoriesRepository) Update(ctx context.Context, id int64, Body model.Category) (*model.Category, error) {
	ret := _m.Called(ctx, id, Body)

	var r0 *model.Category
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.Category) *model.Category); ok {
		r0 = rf(ctx, id, Body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, model.Category) error); ok {
		r1 = rf(ctx, id, Body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCategoriesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCategoriesRepository creates a new instance of CategoriesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategoriesRepository(t mockConstructorTestingTNewCategoriesRepository) *CategoriesRepository {
	mock := &CategoriesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
